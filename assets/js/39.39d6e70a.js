(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{475:function(n,e,o){"use strict";o.r(e);var t=o(2),i=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"dubbo源码-框架初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dubbo源码-框架初始化"}},[n._v("#")]),n._v(" Dubbo源码-框架初始化")]),n._v(" "),e("p",[n._v("Dubbo通过利用Spring的生命周期钩子、监听器等机制来初始化及构造自己的配置。")]),n._v(" "),e("h2",{attrs:{id:"_1-自定义springboot生命周期类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-自定义springboot生命周期类"}},[n._v("#")]),n._v(" 1. 自定义SpringBoot生命周期类")]),n._v(" "),e("h3",{attrs:{id:"_1-1-applicationlistener"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-applicationlistener"}},[n._v("#")]),n._v(" 1.1 ApplicationListener")]),n._v(" "),e("ul",[e("li",[n._v("OverrideDubboConfigApplicationListener：负责加载Dubbo配置，优先级：\n"),e("ol",[e("li",[n._v("Spring管理的配置")]),n._v(" "),e("li",[n._v("Spring配置中dubbo.properties.file定义的文件内部的配置")]),n._v(" "),e("li",[n._v("系统环境变量中配置的dubbo.properties.file定义的文件内部的配置")])])]),n._v(" "),e("li",[n._v("DubboConfigBeanDefinitionConflictApplicationListener：负责确保上下文中只有一个org.apache.dubbo.config.ApplicationConfig类型的Bean")]),n._v(" "),e("li",[n._v("WelcomeLogoApplicationListener：展示Logo页面")]),n._v(" "),e("li",[n._v("AwaitingNonWebApplicationListener：判断当前是否是WEB环境(通过ApplicationContext类型判断),并在非WEB环境下阻塞，保证程序唤醒")])]),n._v(" "),e("h3",{attrs:{id:"_1-2-applicationcontextinitializer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-applicationcontextinitializer"}},[n._v("#")]),n._v(" 1.2 ApplicationContextInitializer")]),n._v(" "),e("p",[n._v("DubboApplicationContextInitializer：SpringApplication实例初始化过程中调用，向上下文注入自定义的BeanFactoryPostProcessor：OverrideBeanDefinitionRegistryPostProcessor类")]),n._v(" "),e("h3",{attrs:{id:"_1-3-environmentpostprocessor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-environmentpostprocessor"}},[n._v("#")]),n._v(" 1.3 EnvironmentPostProcessor")]),n._v(" "),e("p",[n._v('DubboDefaultPropertiesEnvironmentPostProcessor：读取application.name等信息，并写入自定义的PropertySource到Environment,主要是在Properties里加入或替换默认配置,名称为"defaultProperties"，2.7.5版本是以下4个：\n- dubbo.application.name：默认取spring.application.name配置\n- dubbo.config.multiple：默认true\n- dubbo.application.qos-enable：默认false\n- spring.main.allow-bean-definition-overriding：默认true，即允许BeanOverride=')]),n._v(" "),e("h2",{attrs:{id:"_2-利用autoconfiguration机制注入bean、beandefinition、beanfactorypostprocessor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-利用autoconfiguration机制注入bean、beandefinition、beanfactorypostprocessor"}},[n._v("#")]),n._v(" 2. 利用AutoConfiguration机制注入Bean、BeanDefinition、BeanFactoryPostProcessor")]),n._v(" "),e("h3",{attrs:{id:"_2-1-autoconfiguration导入配置类直接定义bean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-autoconfiguration导入配置类直接定义bean"}},[n._v("#")]),n._v(" 2.1 AutoConfiguration导入配置类直接定义Bean")]),n._v(" "),e("ul",[e("li",[n._v("DubboRelaxedBinding2AutoConfiguration：\n"),e("ul",[e("li",[n._v("PropertyResolver:注册dubbo.scan.开头的property")]),n._v(" "),e("li",[n._v("ConfigurationBeanBinder:BinderDubboConfigBinder")])])]),n._v(" "),e("li",[n._v("DubboAutoConfiguration\n"),e("ul",[e("li",[n._v("ServiceAnnotationBeanPostProcessor：需要定义dubbo.scan.base-packages")]),n._v(" "),e("li",[n._v("ReferenceAnnotationBeanPostProcessor")]),n._v(" "),e("li",[n._v("SingleDubboConfigConfiguration:单配置情况下：允许通过properties文件来定义bean，比如dubbo.application=com.my.DubboAppConfig")]),n._v(" "),e("li",[n._v("MultipleDubboConfigConfiguration:多配置情况下：同上")]),n._v(" "),e("li",[n._v("PropertyResolver：指向默认的Environment")])])]),n._v(" "),e("li",[n._v("DubboRelaxedBindingAutoConfiguration:SpringBoot1.X用，已废弃")])]),n._v(" "),e("h3",{attrs:{id:"_2-2-通过-import自定义的beanregistrar来注册框架bean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-通过-import自定义的beanregistrar来注册框架bean"}},[n._v("#")]),n._v(" 2.2 通过@Import自定义的BeanRegistrar来注册框架Bean")]),n._v(" "),e("p",[n._v("@EnableDubbo注解作为Dubbo的根注解，其中Import了以下的Registrar")]),n._v(" "),e("ul",[e("li",[n._v("DubboConfigConfigurationRegistrar：\n"),e("ol",[e("li",[n._v("注册Bean:DubboConfigConfiguration.Single或者MultipleBean")]),n._v(" "),e("li",[n._v("注册Bean:DubboConfigAliasPostProcessor")]),n._v(" "),e("li",[n._v("注册Bean:NamePropertyDefaultValueDubboConfigBeanCustomizer")])])]),n._v(" "),e("li",[n._v("DubboComponentScanRegistrar:\n"),e("ol",[e("li",[n._v("处理@DubboComponentScan定义的package,如果没有定义，则默认取mainClass的包名")]),n._v(" "),e("li",[n._v("注册INFRA_Bean:ServiceAnnotationBeanPostProcessor,后续处理@Service注解，构造器参数中的basePackages为上一步处理的结果")]),n._v(" "),e("li",[n._v("注解INFRA_Bean:ReferenceAnnotationBeanPostProcessor")])])]),n._v(" "),e("li",[n._v("DubboConfigBindingRegistrar\n"),e("ol",[e("li",[n._v("处理@EnableDubboConfigBinding注解定义的自定义的Dubbo配置文件前缀")])])]),n._v(" "),e("li",[n._v("DubboLifecycleComponentRegistrar\n"),e("ol",[e("li",[n._v("注册DubboLifecycleComponentApplicationListener，此类负责加载自定义的DubboComponent生命周期钩子类："),e("code",[n._v("org.apache.dubbo.common.context.Lifecycle")])]),n._v(" "),e("li",[n._v("注册DubboBootstrapApplicationListener，此类负责在Context开启和关闭时调用"),e("strong",[n._v("DubboBootstrap")]),n._v("中的生命周期钩子")])])]),n._v(" "),e("li",[n._v("ConfigurationBeanBindingRegistrar\n"),e("ol",[e("li",[n._v("注册DubboConfigBean：根据properties定义的dubbo.xxx来初始化对应的ConfigBean")]),n._v(" "),e("li",[n._v("注册Bean：ConfigurationBeanBindingPostProcessor")])])])]),n._v(" "),e("h3",{attrs:{id:"_2-3-自定义的beandefinitionregistrypostprocessor-介入beandefinition过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-自定义的beandefinitionregistrypostprocessor-介入beandefinition过程"}},[n._v("#")]),n._v(" 2.3 自定义的BeanDefinitionRegistryPostProcessor:介入BeanDefinition过程")]),n._v(" "),e("ul",[e("li",[n._v("DubboConfigAliasPostProcessor:负责在Dubbo相关的ConfigBean注册后，把ID注册成Bean的别名")]),n._v(" "),e("li",[n._v("ServiceAnnotationBeanPostProcessor：\n"),e("ul",[e("li",[n._v("注册DubboBootstrapApplicationListener：@EnableDubbo已经注册了这个Listener")]),n._v(" "),e("li",[n._v("扫描指定的package下面的所有类，获得Dubbo@Service注解后的类，并注册成BeanDefinition：\n1. 通过调用Spring提供的方法，指定注解扫描\n2. 获取Interface，注意这里支持三种模式，1. 注解定义Class，2.注解定义interface全限定名，3.根据继承来定义,"),e("strong",[n._v("注意，Dubbo只会提取第一个interface")]),n._v("\n3. 处理对应的Bean中@Service注解内部的attribute：\n- provider\n- monitor\n- application\n- module\n- registry:指定注册中心配置类\n- protocol\n4. BeanName为"),e("code",[n._v("ServiceBean:接口名:version:group")]),n._v("\n5. BeanDefinition会被BeanPostProcessor处理复制成Dubbo的ServiceBean，复制后的大部分属性跟Spring扫描出来的bd相同，区别是增加了protocol等dubbo特有属性，而且class被设置成了ServiceBean！，这些ServiceBean在初始化过程中，由于附录1中的代码，会在构造完成后把自己注册到configManager中：")])])])]),n._v(" "),e("p",[n._v("附录1 ServiceBean把自己注册到ConfigManager中")]),n._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[n._v("  "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@PostConstruct")]),n._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("addIntoConfigManager")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      "),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ApplicationModel")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("getConfigManager")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("addConfig")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("h3",{attrs:{id:"_2-4-自定义的beanfacotrypostprocessor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-自定义的beanfacotrypostprocessor"}},[n._v("#")]),n._v(" 2.4 自定义的BeanFacotryPostProcessor")]),n._v(" "),e("ul",[e("li",[n._v("ConfigurationBeanBindingPostProcessor:加载两个BeanPostProcessor\n"),e("ul",[e("li",[n._v("ConfigurationBeanBinder")]),n._v(" "),e("li",[n._v("ConfigurationBeanCustomizer：为bean注入name属性")])])])]),n._v(" "),e("h2",{attrs:{id:"_3-自定义的beanpostprocessor在bean创建过程介入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-自定义的beanpostprocessor在bean创建过程介入"}},[n._v("#")]),n._v(" 3. 自定义的BeanPostProcessor在Bean创建过程介入")]),n._v(" "),e("ul",[e("li",[n._v("ConfigurationBeanBindingPostProcessor:\n"),e("ul",[e("li",[n._v("BeforeInitialization:把PropertySource内部的配置绑定到对应的配置类的Field中，并且调用ConfigurationBeanCustomizer注入Name")])])]),n._v(" "),e("li",[n._v("ReferenceAnnotationBeanPostProcessor:\n"),e("ul",[e("li",[n._v("在Bean实例初始化后，populateBean阶段，调用到postProcessPropertyValues方法：\n"),e("ol",[e("li",[n._v("查找@Reference注解，获取注解配置信息")]),n._v(" "),e("li",[n._v("根据注解构造一个ReferenceBean,这个Bean里保存了后续生成代理所需要的必要属性信息，比如version等")]),n._v(" "),e("li",[n._v("把上面的ReferenceBean注入到@Reference注解对应的Field中")]),n._v(" "),e("li",[n._v("创建代理：Invoker，根据Protocol对应的实例，默认使用RegistryProtocol，调用其refer方法，见"),e("RouterLink",{attrs:{to:"/views/java/dubbo/2020/DubboReference.html"}},[n._v("DubboReference源码解析")])],1)])])])])]),n._v(" "),e("h2",{attrs:{id:"_4-自定义的事件监听-在上下文事件中处理并启动dubbo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-自定义的事件监听-在上下文事件中处理并启动dubbo"}},[n._v("#")]),n._v(" 4. 自定义的事件监听，在上下文事件中处理并启动Dubbo")]),n._v(" "),e("ul",[e("li",[n._v("DubboLifecycleComponentApplicationListener：\n"),e("ul",[e("li",[n._v("ContextRefreshedEvent：加载所有Dubbo的Lifecycle类到缓存，并调用其start方法，默认实现没有Lifecycle实现类")])])]),n._v(" "),e("li",[n._v("DubboBootstrapApplicationListener：\n"),e("ul",[e("li",[n._v("ContextRefreshedEvent：加载DubboBootStrap类，调用dubboBootstrap的start方法，"),e("strong",[n._v("这是Dubbo的核心类和核心方法")])])])])]),n._v(" "),e("h2",{attrs:{id:"_5-applicationmodel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-applicationmodel"}},[n._v("#")]),n._v(" 5. ApplicationModel")]),n._v(" "),e("ol",[e("li",[n._v("Bean初始化阶段，初始化ConfigManger对象内部的各种Config:\n"),e("ul",[e("li",[n._v("ApplicationConfig: 保存Application级别的配置")]),n._v(" "),e("li",[n._v("RegistryConfig: 注册中心配置")]),n._v(" "),e("li",[n._v("Protocol：序列化配置")]),n._v(" "),e("li",[n._v("ProviderConfig:")]),n._v(" "),e("li",[e("strong",[n._v("ServiceBean")]),n._v("：注意，所有的Service，都是以ServiceBean的形式存在Spring的工厂里，ServiceBean内存存储了每个Service的元信息")]),n._v(" "),e("li",[n._v("ConfigCenter:配置中心")]),n._v(" "),e("li",[n._v("Monitor：监视器")]),n._v(" "),e("li",[n._v("Metric:指标")]),n._v(" "),e("li",[n._v("Module:")]),n._v(" "),e("li",[n._v("SSL")])])])])])}),[],!1,null,null,null);e.default=i.exports}}]);