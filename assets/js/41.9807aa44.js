(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{477:function(e,r,t){"use strict";t.r(r);var i=t(2),o=Object(i.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"dubbo源码-dubbobootstrap-start"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dubbo源码-dubbobootstrap-start"}},[e._v("#")]),e._v(" Dubbo源码-DubboBootstrap.start")]),e._v(" "),r("p",[e._v("在Spring上下文refresh完成后，会广播"),r("code",[e._v("ContextRefreshed")]),e._v("事件，此时"),r("code",[e._v("DubboBootstrapApplicationListener")]),e._v("的监听被触发，调用dubboBootstrap实例的"),r("code",[e._v("start")]),e._v("方法，DubboBootStrap作为单例类，在初始化单例时，通过Dubbo特殊的SPI机制初始化了一些Extension实例")]),e._v(" "),r("h2",{attrs:{id:"_1-1-加载的插件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-加载的插件"}},[e._v("#")]),e._v(" 1.1 加载的插件")]),e._v(" "),r("ol",[r("li",[e._v("EventDispatcher:Dubbo相关事件分发，通过监听模式实现，有parallel和direct两种实现，在初始化Dispatcher实例时，会初始化EventListener")]),e._v(" "),r("li",[e._v("ExtensionFactory:插件实例工厂类，\n"),r("ul",[r("li",[e._v("SpringExtensionFactory：从Spring上下文(BeanFactory)中加载Extension实例")]),e._v(" "),r("li",[e._v("SpiExtensionFactory：使用DubboSPI机制加载Extension实例")]),e._v(" "),r("li",[e._v("AdaptiveExtensionFactory：通过内置的AdaptiveCompiler编译为对应的Adaptive实例，来适配所有已加载的Extension的实现，遍历上述两个Factory来加载实例，其本身也是通过SPI机制来初始化的")])])]),e._v(" "),r("li",[e._v("EventListener:Dubbo事件监听器，会被放入EventDispatcher实例\n"),r("ul",[r("li",[e._v("ServiceNameMappingListener:ServiceConfigExportedEvent时，导出ServiceMap")]),e._v(" "),r("li",[e._v("各种LoggingEventListener：打印Service事件日志")]),e._v(" "),r("li",[e._v("CustomizableServiceInstanceListener：ServiceInstancePreRegisteredEvent事件后，调用各种ServiceInstanceCustomizer")])])]),e._v(" "),r("li",[e._v("ExecutorRepository：")]),e._v(" "),r("li",[e._v("FrameExt:框架相关的插件，\n"),r("ul",[r("li",[e._v("ConfigManager:配置管理")]),e._v(" "),r("li",[e._v("Environment：Dubbo环境管理，整合Spring配置等，初始化时会调用ConfigManager插件来获取配置中心信息")]),e._v(" "),r("li",[e._v("ServiceRepository：注册Service，包括Provider和Consumer")])])]),e._v(" "),r("li",[e._v("ShutdownHookCallback：shutdown的钩子")]),e._v(" "),r("li",[e._v("Protocol：各种rpc协议，默认为dubbo,可以查看"),r("code",[e._v("org.apache.dubbo.rpc.protocol")]),e._v("包，实际也是通过Dubbo的Compile机制编译成的Adaptive插件，"),r("strong",[e._v("注意，实际上检查各种Protocol的依赖包是在这个编译过程中进行的")])]),e._v(" "),r("li",[e._v("ProxyFactory：代理类的工厂类，默认是javassist")]),e._v(" "),r("li",[e._v("BuiltinServiceDetector：加载内置Service：GenericService和EchoService")]),e._v(" "),r("li",[e._v("DynamicConfigurationFactory:动态获取配置的工厂类，对于每一种protocol，都有对应的实现")]),e._v(" "),r("li",[e._v("ZookeeperTransporter：实际执行与zk的连接过程")]),e._v(" "),r("li",[e._v("WritableMetadataService:MetadataService，负责管理某个Service的元数据，provider侧用inMemory保存本地提供的Service，consumer侧用remote保存订阅的Provider信息")]),e._v(" "),r("li",[e._v("MetadataServiceExporter:负责管理ServiceConfig和MetadataService List")])]),e._v(" "),r("h3",{attrs:{id:"_1-2-加载配置管理器-configmanager"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-加载配置管理器-configmanager"}},[e._v("#")]),e._v(" 1.2 加载配置管理器：ConfigManager")]),e._v(" "),r("ul",[r("li",[e._v("配置中心：自实现ConfigCenterConfig可以")])]),e._v(" "),r("h3",{attrs:{id:"_1-3-注册shutdownhook"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-注册shutdownhook"}},[e._v("#")]),e._v(" 1.3 注册ShutdownHook")]),e._v(" "),r("h2",{attrs:{id:"_2-initialize"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-initialize"}},[e._v("#")]),e._v(" 2. Initialize")]),e._v(" "),r("ol",[r("li",[e._v("加载FrameworkExt插件：加载@SPI注解的FrameworkExt接口的实现类，调用其Initialize方法，主要是Environment插件的getConfig方法来获取配置中心-dubbo.configCenter.xxx的配置")]),e._v(" "),r("li",[e._v("启动配置中心")]),e._v(" "),r("li",[e._v("如果没有配置中心，使用Registry即注册中心当作配置中心\n"),r("ul",[r("li",[e._v("prepareEnvironment: 这个过程会尝试读取配置中心的配置，由于把注册中心复用为配置中心，此时会加载注册中心相关的Ext，并尝试连接注册中心获取动态配置")])])]),e._v(" "),r("li",[e._v("开启MetadataReport：\n"),r("ol",[r("li",[e._v("调用InfraAdapter\n"),r("ul",[r("li",[e._v("EnvironmentAdapter:获取OS Environment: DUBBO_LABELS=tag=pre;key=value 、JVM Options: -Denv_keys = DUBBO_KEY1, DUBBO_KEY2,放入配置")])])])])]),e._v(" "),r("li",[e._v("从远程配置中加载注册中心")]),e._v(" "),r("li",[e._v("校验配置：校验长度、正则表达式等")]),e._v(" "),r("li",[e._v("初始化MetadataService")]),e._v(" "),r("li",[e._v("初始化MetadataServiceExporter")]),e._v(" "),r("li",[e._v("注册事件监听：DubboBootstrap实例也监听了某些事件")])]),e._v(" "),r("h2",{attrs:{id:"_3-export-dubbo-services"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-export-dubbo-services"}},[e._v("#")]),e._v(" 3. export Dubbo Services")]),e._v(" "),r("p",[e._v('遍历ConfigManager里面的每个"service"配置')]),e._v(" "),r("ol",[r("li",[e._v("生成对应的ServiceMetadata")]),e._v(" "),r("li",[e._v("ServiceRepository注册Provider，每个Provider包裹在ProviderModel里，内部包含元信息和MethodModel列表")]),e._v(" "),r("li",[e._v("生成Exporter和注册Exporter\n"),r("ol",[r("li",[e._v("生成需要往注册中心注册的URL，URL里包含以下信息\n"),r("ul",[r("li",[e._v("Protocol，通过组合默认配置和自定义配置，决定传输协议，本机IP，端口等信息")]),e._v(" "),r("li",[e._v("通过从ProviderConfig里提取，决定接口，方法列表等信息")])])]),e._v(" "),r("li",[e._v("调用ProxyFactory插件来生成Invoker，把Invoker和url包裹成Exporter，对于Provider侧，代理默认使用Javassist来生成Injvm代理，")]),e._v(" "),r("li",[e._v("Exporter根据URL打开本地的ExchangServer，默认使用Netty4，并进行序列化优化")])])]),e._v(" "),r("li",[e._v("publishServiceDefinition：生成ServiceDefinition")]),e._v(" "),r("li",[e._v("服务发布，发布ServiceConfigExportedEvent，触发对应的Listener\n"),r("ul",[r("li",[e._v("ServiceNameMapping")])])])]),e._v(" "),r("h2",{attrs:{id:"_4-referservices"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-referservices"}},[e._v("#")]),e._v(" 4. referServices")])])}),[],!1,null,null,null);r.default=o.exports}}]);