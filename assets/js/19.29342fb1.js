(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{455:function(t,a,l){"use strict";l.r(a);var n=l(2),v=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java中的io模型与响应式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中的io模型与响应式编程"}},[t._v("#")]),t._v(" Java中的IO模型与响应式编程")]),t._v(" "),a("p",[t._v("Java中的IO模型分为阻塞式IO、非阻塞式IO，IO多路复用，异步IO，事件驱动5种：")]),t._v(" "),a("ul",[a("li",[t._v("阻塞式IO：Blocking IO，BIO，阻塞当前线程，等待IO完成后进行后续业务操作，线程模型，每个线程同时段仅处理一个IO请求")]),t._v(" "),a("li",[t._v("非阻塞IO：Non-Blocking IO，NIO，")]),t._v(" "),a("li",[t._v("异步IO：Async IO，类似BIO，区别是将后续业务操作包裹在另外一个线程中丢给线程池执行，Java中的实现为Future和Callback模型（注意"),a("strong",[t._v("不是")]),t._v("Callable），后者典型的如Swing的EventListener")]),t._v(" "),a("li",[t._v("IO多路复用：继承自Unix的IO Multiplex，")]),t._v(" "),a("li",[t._v("事件驱动：")])])])}),[],!1,null,null,null);a.default=v.exports}}]);