(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{565:function(i,e,n){"use strict";n.r(e);var o=n(2),r=Object(o.a)({},(function(){var i=this,e=i._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[e("h1",{attrs:{id:"springboot源码-app启动过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot源码-app启动过程"}},[i._v("#")]),i._v(" SpringBoot源码-App启动过程")]),i._v(" "),e("h2",{attrs:{id:"_1-整体流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-整体流程"}},[i._v("#")]),i._v(" 1. 整体流程")]),i._v(" "),e("ol",[e("li",[i._v("a = new SpringApplication(primarySources)")]),i._v(" "),e("li",[i._v("a.run")])]),i._v(" "),e("h3",{attrs:{id:"_1-1-初始化springapplication实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-初始化springapplication实例"}},[i._v("#")]),i._v(" 1.1 初始化SpringApplication实例")]),i._v(" "),e("ol",[e("li",[i._v("判断webApplicationType:通过尝试使用ClassLoader加载对应的标识类来判断WebApp类型，首先判断WEBFLUX,然后根据javax.servlet.Servlet类和WebApplicationContext类判断是否Servlet,都不是则返回None")]),i._v(" "),e("li",[i._v("加载所有Jar包中META-INF/spring.facotry文件定义的工厂类：")]),i._v(" "),e("li",[i._v("初始化ApplicationContextInitializer类型实例")]),i._v(" "),e("li",[i._v("初始化ApplicationListener实例")]),i._v(" "),e("li",[i._v("获取MainApplicationClass：通过从调用栈中获取main方法所在的类来获取")])]),i._v(" "),e("h3",{attrs:{id:"_1-2-启动初始化完成的springapplication"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-启动初始化完成的springapplication"}},[i._v("#")]),i._v(" 1.2 启动初始化完成的SpringApplication")]),i._v(" "),e("ol",[e("li",[i._v("开启计时器")]),i._v(" "),e("li",[i._v("设置java.awt.headless：Headless模式是系统的一种配置模式。在该模式下，系统缺少了显示设备、键盘或鼠标。")]),i._v(" "),e("li",[i._v("初始化并启动配置的SpringApplicationRunListeners类型实例:\n"),e("ol",[e("li",[i._v("SpringBoot包定义一个EventPublishingRunListener实现，此实现在构造过程中会在内部初始化SimpleApplicationEventMulticaster实例：")]),i._v(" "),e("li",[i._v("广播ApplicationStartingEvent事件到相应的Listener：\n"),e("ul",[e("li",[i._v("LoggingApplicationListener：加载log实现，顺序：org.springframework.boot.logging.LoggingSystem定义>logback>log4j>jul")]),i._v(" "),e("li",[i._v("BackgroundPreinitializer: 提前开始初始化耗时的Bean如Conversion、Jackson等Bean")]),i._v(" "),e("li",[i._v("DelegatingApplicationListener：无操作")]),i._v(" "),e("li",[i._v("LiquibaseServiceLocatorApplicationListener：无操作")])])])])]),i._v(" "),e("li",[i._v("Prepare Environment实例：\n"),e("ol",[e("li",[i._v("初始化PropertySources：servletConfigInitParams,servletContextInitParams,systemProperties,systemEnvironment")]),i._v(" "),e("li",[i._v("初始化ConversionService: 使用ApplicationConversionService实例")]),i._v(" "),e("li",[i._v("读取Profile")]),i._v(" "),e("li",[i._v("Environment Prepare完成，广播ApplicationEnvironmentPreparedEvent事件,调用所有的ApplicationListener，调用对应方法，下面仅挑选重点的几个：\n"),e("ul",[e("li",[i._v("ConfigFileApplicationListener: 见#### 1.2.1 Config文件加载")]),i._v(" "),e("li",[i._v("LoggingApplicationListener：处理Logger相关")])])]),i._v(" "),e("li",[i._v("Bind过程----\x3etodo")]),i._v(" "),e("li",[i._v("自定义Environment转换为标准Environment")]),i._v(" "),e("li",[i._v("新增一个ConfigurationPropertySources")])])]),i._v(" "),e("li",[i._v("设置spring.beaninfo.ignore，默认为true，即跳过BeanInfo检测")]),i._v(" "),e("li",[i._v("打印Banner")]),i._v(" "),e("li",[i._v("创建上下文：ApplicationContext：对于SERVLET模式,实际初始化AnnotationConfigServletWebServerApplicationContext对象，见"),e("RouterLink",{attrs:{to:"/views/spring/2020/ServletApplicationContext.html"}},[i._v("AnnotationConfigServletWebServerApplicationContext源码解读")])],1),i._v(" "),e("li",[i._v("创建SpringBootExceptionReporter实例\n"),e("ul",[e("li",[i._v("org.springframework.boot.diagnostics.FailureAnalyzers")])])]),i._v(" "),e("li",[i._v("prepare上下文，见"),e("RouterLink",{attrs:{to:"/views/spring/2020/ServletApplicationContext.html"}},[i._v("AnnotationConfigServletWebServerApplicationContext源码解读")])],1),i._v(" "),e("li",[i._v("refresh上下文，见"),e("RouterLink",{attrs:{to:"/views/spring/2020/ServletApplicationContext.html"}},[i._v("AnnotationConfigServletWebServerApplicationContext源码解读")])],1),i._v(" "),e("li",[i._v("afterRefresh,默认无操作")])]),i._v(" "),e("h4",{attrs:{id:"_1-2-1-config文件加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-config文件加载"}},[i._v("#")]),i._v(" 1.2.1 Config文件加载")]),i._v(" "),e("p",[i._v("时机：EnvironmentPrepared事件发布后\n类：ConfigFileApplicationListener")]),i._v(" "),e("ol",[e("li",[i._v("读取EnvironmentPostProcessor列表，并分别调用：\n"),e("ul",[e("li",[i._v("SystemEnvironmentPropertySourceEnvironmentPostProcessor：将Environment中的SystemEnvironmentPropertySource替换成OriginAwareSystemEnvironmentPropertySource")]),i._v(" "),e("li",[i._v("SpringApplicationJsonEnvironmentPostProcessor：处理spring.application.json数据为Spring数据源，来源包括环境变量（SPRING_APPLICATION_JSON），系统属性或者properties定义")]),i._v(" "),e("li",[i._v("CloudFoundryVcapEnvironmentPostProcessor：处理云环境的VCAP数据")]),i._v(" "),e("li",[i._v("ConfigFileApplicationListener：见1.2.1.1，配置文件加载到Environment")])])])]),i._v(" "),e("h5",{attrs:{id:"_1-2-1-1-配置文件加载到environment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-1-配置文件加载到environment"}},[i._v("#")]),i._v(" 1.2.1.1 配置文件加载到Environment")]),i._v(" "),e("ul",[e("li",[i._v("时机：EnvironmentPrepared事件广播->调用ApplicationListener->调用ConfigFileApplicationListener的onApplicationEvent方法->加载并调用所有的EnvironmentPostProcessor类型的实例的postProcessEnvironment方法->ConfigFileApplicationListener实例本身属于EnvironmentPostProcessor类，调用其postProcessEnvironment方法")]),i._v(" "),e("li",[i._v("方法：ConfigFileApplicationListener实例的postProcessEnvironment方法")]),i._v(" "),e("li",[i._v("过程：")])]),i._v(" "),e("ol",[e("li",[i._v("初始化Loader实例:\n"),e("ol",[e("li",[i._v("初始化placeholdersResolver："),e("code",[i._v("new PropertySourcesPlaceholdersResolver(this.environment);")])]),i._v(" "),e("li",[i._v("初始化resourceLoader："),e("code",[i._v("new DefaultResourceLoader();")])]),i._v(" "),e("li",[i._v("初始化propertySourceLoaders："),e("code",[i._v("SpringFactoriesLoader.loadFactories(PropertySourceLoader.class, getClass().getClassLoader())")]),i._v("：\n"),e("ul",[e("li",[i._v("org.springframework.boot.env.PropertiesPropertySourceLoader")]),i._v(" "),e("li",[i._v("org.springframework.boot.env.YamlPropertySourceLoader")])])])])]),i._v(" "),e("li",[i._v("调用Loader.load()方法\n"),e("ol",[e("li",[i._v("获取Active Profile：读取PropertySource(到当前阶段，主要还是SystemProperties和SystemEnvironment值)的spring.profiles.active和spring.profiles.include的配置")]),i._v(" "),e("li",[i._v("根据profile读取配置文件:\n"),e("ul",[e("li",[i._v("位置：\n"),e("ol",[e("li",[i._v("环境变量中spring.config.location配置的位置")]),i._v(" "),e("li",[i._v("环境变量中spring.config.additional-location配置的位置")]),i._v(" "),e("li",[i._v("预设的位置："),e("strong",[i._v("注意，由于有reverse操作，所以最后一个为先")]),i._v("：classpath:/,classpath:/config/,file:./,file:./config/，")])])]),i._v(" "),e("li",[i._v("加载策略：\n"),e("ol",[e("li",[i._v("如果有spring.config.name定义，则加载定义的文件名，否则加载文件名由application开头的文件")]),i._v(" "),e("li",[i._v("调用所有的PropertySourceLoader，处理所有其定义的文件后缀对应的文件，对于默认情况，分别有两个默认加载器，其中Properties加载器负责加载")])])])])])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);