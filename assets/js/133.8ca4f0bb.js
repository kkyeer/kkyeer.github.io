(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{568:function(t,o,n){"use strict";n.r(o);var i=n(2),a=Object(i.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"springboot源码-configuration配置处理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#springboot源码-configuration配置处理"}},[t._v("#")]),t._v(" SpringBoot源码-@Configuration配置处理")]),t._v(" "),o("h2",{attrs:{id:"_1-解析class-读取beandefinition"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-解析class-读取beandefinition"}},[t._v("#")]),t._v(" 1. 解析Class，读取BeanDefinition")]),t._v(" "),o("p",[t._v("时机：refresh context，调用所有的BeanFactoryPostProcessor，其中SharedMetadataReaderFactoryContextInitializer会添加一个BeanPostProcessor:internalConfigurationAnnotationProcessor,这个会在接下来被调用\n对象：FullConfiguration：@Configuration注解的类；LiteConfiguration:@Import注解的类\n顺寻：根据Class的@Order进行排序\nparse: 调用ConfigurationClassParser对象的parse方法来进行解析：")]),t._v(" "),o("ol",[o("li",[t._v("根据@Conditional判断是否需要跳过")]),t._v(" "),o("li",[t._v("处理@PropertySource")]),t._v(" "),o("li",[t._v("处理@ComponentScan：读取指定的包下的所有子类，挑选@Component注解的类，读取信息成为BeanDefinitionHolder，底层调用ComponentScanAnnotationParser类的parse方法：\n"),o("ol",[o("li",[t._v("ClassPathBeanDefinitionScanner：扫描"),o("code",[t._v("classpath*:com/package/name/**/*.class")]),t._v("，**注意，如果basePackage没有配置，则默认取@Configuration对应的类的包名")]),t._v(" "),o("li",[t._v("判断依据：MBean和@Component注解，包括其子注解")]),t._v(" "),o("li",[t._v("处理的注解：\n"),o("ul",[o("li",[t._v("@Lazy")]),t._v(" "),o("li",[t._v("@Primary")]),t._v(" "),o("li",[t._v("@Role")]),t._v(" "),o("li",[t._v("@Description")]),t._v(" "),o("li",[t._v("@DependsOn")])])])])]),t._v(" "),o("li",[t._v("处理@Import：\n"),o("ul",[o("li",[t._v("@SpringBootApplication\n"),o("ul",[o("li",[t._v("@EnableAutoConfiguration\n"),o("ul",[o("li",[t._v("@Import(AutoConfigurationImportSelector.class)")]),t._v(" "),o("li",[t._v("@AutoConfigurationPackage\n"),o("ul",[o("li",[t._v("@Import(AutoConfigurationPackages.Registrar.class)")])])])])])])]),t._v(" "),o("li",[t._v("上面@Import进来的class分为两种：\n"),o("ul",[o("li",[t._v("ImportSelector：决定哪些Configuration类可以被选中，其子类DeferredImportSelector提供了分组的形式来细化管理Import\n"),o("ul",[o("li",[t._v("AutoConfigurationImportSelector:处理SpringAutoConfiguration包下面定义的各种Bean等")])])]),t._v(" "),o("li",[t._v("ImportBeanDefinitionRegistrar：注册BeanDefinition")])])])])]),t._v(" "),o("li",[t._v("处理@ImportResource")]),t._v(" "),o("li",[t._v("处理@Bean")]),t._v(" "),o("li",[t._v("处理接口里的default方法")]),t._v(" "),o("li",[t._v("处理父类")]),t._v(" "),o("li",[t._v("递归处理过程中导入的ImportSelector，导入其定义的Configuration类，缓存")])]),t._v(" "),o("h2",{attrs:{id:"_2-校验configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-校验configuration"}},[t._v("#")]),t._v(" 2. 校验Configuration")]),t._v(" "),o("h2",{attrs:{id:"_3-处理importselector导入的配置类"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-处理importselector导入的配置类"}},[t._v("#")]),t._v(" 3. 处理ImportSelector导入的配置类")]),t._v(" "),o("h2",{attrs:{id:"_4-清理工作"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4-清理工作"}},[t._v("#")]),t._v(" 4. 清理工作")])])}),[],!1,null,null,null);o.default=a.exports}}]);