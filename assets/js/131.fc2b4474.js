(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{565:function(t,a,r){"use strict";r.r(a);var e=r(2),i=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"springboot源码-fun-fact"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot源码-fun-fact"}},[t._v("#")]),t._v(" SpringBoot源码-Fun Fact")]),t._v(" "),a("h2",{attrs:{id:"事件-event"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件-event"}},[t._v("#")]),t._v(" 事件-Event")]),t._v(" "),a("ol",[a("li",[t._v("ApplicationStartingEvent：应用启动")]),t._v(" "),a("li",[t._v("ApplicationEnvironmentPreparedEvent：Environment初始化完成")]),t._v(" "),a("li",[t._v("contextPrepared：ApplicationContext实例创建并prepare完成")]),t._v(" "),a("li",[t._v("ApplicationPreparedEvent:读取并注册根Class的BeanDefinition完成")]),t._v(" "),a("li",[t._v("AutoConfigurationImportEvents")]),t._v(" "),a("li",[t._v("ContextRefreshedEvent:上下文refresh完成")]),t._v(" "),a("li",[t._v("ServletWebServerInitializedEvent：SerletWebServer初始化完成")]),t._v(" "),a("li",[t._v("ApplicationStartedEvent:整个应用启动完成")])]),t._v(" "),a("h2",{attrs:{id:"可用配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可用配置"}},[t._v("#")]),t._v(" 可用配置")]),t._v(" "),a("ul",[a("li",[t._v("context.initializer.classes：定义的类会在SpringApplication初始化完成ApplicationContext后，prepare过程中被调用initialize方法")])]),t._v(" "),a("h2",{attrs:{id:"aware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aware"}},[t._v("#")]),t._v(" Aware")]),t._v(" "),a("ul",[a("li",[t._v("BeanClassLoaderAware")]),t._v(" "),a("li",[t._v("BeanFactoryAware")]),t._v(" "),a("li",[t._v("EnvironmentAware")]),t._v(" "),a("li",[t._v("ResourceLoaderAware")]),t._v(" "),a("li",[t._v("LoadTimeWeaverAware")])]),t._v(" "),a("h2",{attrs:{id:"配置文件处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置文件处理"}},[t._v("#")]),t._v(" 配置文件处理")]),t._v(" "),a("h3",{attrs:{id:"_1-影响spring对配置文件加载的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-影响spring对配置文件加载的配置"}},[t._v("#")]),t._v(" 1. 影响Spring对配置文件加载的配置")]),t._v(" "),a("ol",[a("li",[t._v("spring.profiles.active和spring.profiles.include:影响可以被加载的profile,间接影响文件名后缀部分")]),t._v(" "),a("li",[t._v("spring.config.location和spring.config.additional-location，影响查找配置文件的路径")]),t._v(" "),a("li",[t._v("默认的配置文件加载路径，"),a("strong",[t._v("注意，顺序是相反的")]),t._v("：classpath:/,classpath:/config/,file:./,file:./config/")]),t._v(" "),a("li",[t._v("PropertySourceLoader类，影响加载配置文件的后缀，默认提供两个实现，分别是:\n"),a("ul",[a("li",[t._v("org.springframework.boot.env.PropertiesPropertySourceLoader:加载.xml和.properties")]),t._v(" "),a("li",[t._v("org.springframework.boot.env.YamlPropertySourceLoader:加载yaml")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-读取配置文件的时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-读取配置文件的时机"}},[t._v("#")]),t._v(" 2. 读取配置文件的时机")]),t._v(" "),a("ol",[a("li",[t._v("org.springframework.boot.context.config.ConfigFileApplicationListener类，在EnvironmentPrepared事件广播后")])]),t._v(" "),a("h2",{attrs:{id:"auto-config原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#auto-config原理"}},[t._v("#")]),t._v(" Auto Config原理")]),t._v(" "),a("h3",{attrs:{id:"spring-boot-autoconfiguration包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-autoconfiguration包"}},[t._v("#")]),t._v(" spring-boot-autoconfiguration包")]),t._v(" "),a("p",[t._v("此包定义了很多默认的Bean，涵盖了数据库，消息队列，云环境，各种插件等，随便扫一眼可以看到jdbc,amqp,kafka,es,neo4j等，包罗万象，这些Bean和配置通过@Conditional和@ConditionalOnMissingBean等来进行动态加载，尤其是@Conditional(XXXX.class)，在Spring加载配置阶段，通过在classpath上筛选依赖的Class是否存在，可以快速加载默认Bean，也可以剔除依赖不满足的Bean")]),t._v(" "),a("h3",{attrs:{id:"autoconfigurationimportselector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autoconfigurationimportselector"}},[t._v("#")]),t._v(" AutoConfigurationImportSelector")]),t._v(" "),a("p",[t._v("此类负责加载所有的@EnableAutoConfiguration注解的类，并根据各个类的@Conditional配置来进行筛选")])])}),[],!1,null,null,null);a.default=i.exports}}]);